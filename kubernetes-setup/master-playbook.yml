---
- hosts: all
  become: yes
  pre_tasks:
  - name: Remove join-command
    local_action: file path=./join-command state=absent

  tasks:
  - name: Create the .conf file to load the modules at bootup
    blockinfile:
      path: /etc/modules-load.d/crio.conf
      block: |
        overlay
        br_netfilter
      create: yes

  - name: Add the br_netfilter and overlay modules
    modprobe:
      name: "{{ item }}"
      state: present
    with_items:
      - br_netfilter
      - overlay

  - name: Ajust sysctl
    sysctl:
      name: "{{ item.key }}"
      value: "{{ item.value }}"
      state: present
      reload: yes
      sysctl_set: yes
    with_items:
      - { 'key': 'net.ipv4.conf.all.rp_filter' , 'value': '0'}
      - { 'key': 'net.bridge.bridge-nf-call-iptables' , 'value': '1'}
      - { 'key': 'net.ipv4.ip_forward' , 'value': '1'}
      - { 'key': 'net.bridge.bridge-nf-call-ip6tables' , 'value': '1'}

  - name: Get Kubernetes version
    uri:
      url: https://dl.k8s.io/release/stable.txt
      return_content: yes
    register: kubernetes_version
    when: k8s_version is undefined or k8s_version == ""

  - name: Add apt repository for kubic:libcontainers:stable
    blockinfile:
      path: /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
      block: |
        deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/x{{ ansible_facts.distribution }}_{{ ansible_facts.distribution_version }}/ /
      create: yes

  - name: Add apt repository for kubic:libcontainers:stable:cri-o
    blockinfile:
      path: /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:{{ version }}.list
      block: |
        deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ version }}/x{{ ansible_facts.distribution }}_{{ ansible_facts.distribution_version }}/ /
      create: yes
    vars:
      version: "{{ kubernetes_version.content[1:5] | default(k8s_version) }}"

  - name: Add apt repository for kubic key
    apt_key:
      url: https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/x{{ ansible_facts.distribution }}_{{ ansible_facts.distribution_version }}/Release.key
      keyring: /etc/apt/trusted.gpg.d/libcontainers.gpg

  - name: Add apt repository for cri-o key
    apt_key:
      url: https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:{{ version }}/x{{ ansible_facts.distribution }}_{{ ansible_facts.distribution_version }}/Release.key
      keyring: /etc/apt/trusted.gpg.d/libcontainers-cri-o.gpg
    vars:
      version: "{{ kubernetes_version.content[1:5] | default(k8s_version) }}"

  - name: Install cri-o
    apt:
      name: ['cri-o', 'cri-o-runc']
      update_cache: yes
      state: present

  - name: Ajust cgroup driver
    blockinfile:
      path: /etc/crio/crio.conf.d/02-cgroup-manager.conf
      block: |
        [crio.runtime]
        conmon_cgroup = "pod"
        cgroup_manager = "cgroupfs"
      create: yes

  - name: systemctl daemon-reload
    systemd: daemon_reload=yes

  - name: Enable cri-o
    systemd:
      name: crio
      state: started
      enabled: True

  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt:
      name: ['kubelet={{ version }}.*', 'kubeadm={{ version }}.*', 'kubectl={{ version }}.*']
      state: present
      update_cache: yes
    vars:
      version: "{{ kubernetes_version.content[1:5] | default(k8s_version) }}"

  - name: Configure node ip
    lineinfile:
      path: /etc/default/kubelet
      create: yes
      line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      state: restarted

  - name: Initialize the Kubernetes cluster using kubeadm
    command: kubeadm init --apiserver-advertise-address="172.16.1.10" --pod-network-cidr="192.168.0.0/16"

  - name: Create .kube directory
    file:
      path: /home/vagrant/.kube
      owner: vagrant
      group: vagrant
      state: directory

  - name: Setup kubeconfig for vagrant user
    file:
      src: /etc/kubernetes/admin.conf
      dest: /home/vagrant/.kube/config
      owner: vagrant
      group: vagrant
      state: link

  - name: Install calico pod network
    become: false
    command: kubectl apply -f https://docs.projectcalico.org/v3.8/manifests/calico.yaml

  - name: Generate join command
    command: kubeadm token create --print-join-command
    register: join_command

  - name: Copy join command to local file
    local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command"

  handlers:
    - name: docker status
      service: name=docker state=started
